---
import { getCollection, type CollectionEntry } from "astro:content";
import { Image } from "astro:assets";
import Layout from "@/layouts/Layout.astro";
import { slide } from "astro:transitions";

export const getStaticPaths = async () => {
	const blogs = await getCollection("blogs");
	return blogs.map((blog) => {
		return {
			params: {
				slug: blog.data.slug,
			},
			props: { blog },
		};
	});
};

type Props = {
	blog: CollectionEntry<"blogs">;
};

const { blog } = Astro.props;
const {
	title,
	excerpt,
	content,
	coverImage,
	publishedDate,
	tags,
	author,
} = blog.data;

const wordCount = content
	.replace(/<[^>]+>/g, "")
	.trim()
	.split(/\s+/).length;
const totalTimeToRead = Math.ceil(wordCount / 200);
const totalTimeToSkim = Math.ceil(wordCount / 500);
---

<Layout title={title} description={excerpt} image={coverImage?.url}>
	<main transition:animate={slide({ duration: "0.2s" })} class="mx-auto">
		{
			coverImage && (
				<div class="flex w-full justify-center">
					<Image
						src={coverImage.url}
						width={coverImage.width}
						height={coverImage.height}
						alt={coverImage.alt || "Blog cover image"}
						class="mb-4 aspect-[4/2] w-5xl max-w-full rounded-sm object-cover shadow-xl max-sm:w-sm"
					/>
				</div>
			)
		}
		<div
			class="mx-auto my-3 max-sm:px-4 sm:max-w-sm md:max-w-xl lg:max-w-3xl"
		>
			<h1
				class="text-center text-xl font-semibold md:text-3xl lg:text-4xl"
			>
				{blog.data.title}
			</h1>
			<div
				class="text-muted/75 mt-1 flex flex-wrap justify-center space-x-2 text-sm"
			>
				<span class="flex items-center gap-1">
					{
						author.profileImage && (
							<Image
								src={author.profileImage.url}
								alt={author.profileImage.alt}
								width={author.profileImage.width}
								height={author.profileImage.height}
								class="inline-block h-6 w-6 rounded-full object-cover align-middle"
							/>
						)
					}
					{author.name ?? author.email.split("@")[0]}
				</span>
				<span class="text-muted/30">&#124;</span>
				<span>
					Published on {publishedDate}
				</span>
				<span class="text-muted/30">&#124;</span>
				<span>
					{totalTimeToSkim} min read ({totalTimeToRead} min read total)
				</span>
				<span class="text-muted/30">&#124;</span>
				<span>
					{wordCount} words
				</span>
			</div>
			{
				tags && (
					<div class="mt-2 flex flex-wrap justify-center gap-2">
						{tags.map(({ tag }) => (
							<span class="text-muted/50 border-muted/20 hover:bg-muted/15 hover:text-foreground inline-block rounded-full border px-3 py-1 text-sm">
								#{tag}
							</span>
						))}
					</div>
				)
			}
		</div>
		<article
			id="article"
			class="prose text-muted prose-headings:text-foreground relative mx-auto my-10 mb-20 overflow-visible max-sm:px-4 sm:max-w-sm md:max-w-xl lg:max-w-3xl"
			set:html={content}
		/>
	</main>
</Layout>
